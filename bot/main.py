import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from .config import APP_TOKEN, setup_logging
from .clickhouse_utils import get_clickhouse_client
from .ml_utils import load_ml_components
from .handlers import register_all_handlers


setup_logging()

async def on_startup(dp: Dispatcher):
    logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ClickHouse –∫–ª–∏–µ–Ω—Ç–∞...")
    if get_clickhouse_client() is None:
        logging.critical("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ClickHouse. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å.")
    
    logging.info("–ó–∞–≥—Ä—É–∑–∫–∞ ML –º–æ–¥–µ–ª–µ–π –∏ NLTK —Ä–µ—Å—É—Ä—Å–æ–≤...")
    try:
        load_ml_components()
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å.")
        return

    logging.info("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...")
    await set_bot_commands(dp)
    logging.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")


async def set_bot_commands(dp: Dispatcher):
    await dp.bot.set_my_commands([
        types.BotCommand("start", "üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ / –ü–æ–º–æ—â—å"),
        types.BotCommand("analyze", "üîé –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å"),
        types.BotCommand("cancel", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"),
    ])

def main():
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ Fake News Detector...")

    storage = MemoryStorage()
    bot_instance = Bot(token=APP_TOKEN)
    dp = Dispatcher(bot_instance, storage=storage)


    register_all_handlers(dp)
    
    
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)

if __name__ == "__main__":
    main()