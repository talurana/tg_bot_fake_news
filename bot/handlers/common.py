import logging
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart, CommandHelp, Command, Text


async def send_welcome_cmd(message: types.Message, state: FSMContext):
    """
    Handler for /start and /help commands
    """
    await state.finish()
    user_name = message.from_user.first_name
    await message.reply(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã –Ø –±–æ—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–µ–π–∫–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "üëâ /analyze - –ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏.\n"
        "üëâ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑.\n"
        "üëâ /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
        parse_mode=types.ParseMode.MARKDOWN
    )

async def cancel_cmd_handler(message: types.Message, state: FSMContext):
    """
    Handler for /cancel command or "–û—Ç–º–µ–Ω–∞" text in any state
    """
    logging.info(f"Cancel handler triggered for user {message.from_user.id} with text: '{message.text}'")
    current_state = await state.get_state()
    if current_state is None:
        await message.reply('–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.', reply_markup=types.ReplyKeyboardRemove())
        return

    logging.info(f'Cancelling state {current_state} for user {message.from_user.id}')
    await state.finish()
    await message.reply('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=types.ReplyKeyboardRemove())


def register_common_handlers(dp: Dispatcher):
    dp.register_message_handler(send_welcome_cmd, CommandStart(), state="*")
    dp.register_message_handler(send_welcome_cmd, CommandHelp(), state="*")
    dp.register_message_handler(cancel_cmd_handler, Command(commands=['cancel']), state="*")
    dp.register_message_handler(cancel_cmd_handler, Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state="*")
    