import logging
import time
from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import ParseMode


from ..states import NewsAnalysis
from ..keyboards import get_model_choice_keyboard, get_feedback_keyboard, feedback_cb
from ..ml_utils import predict_fake_news, MODELS_CONFIG
from ..clickhouse_utils import log_request_to_db, log_feedback_to_db


async def cmd_analyze_start(message: types.Message, state: FSMContext):
    """
    Starts the news analysis process.
    """
    await state.finish()
    await NewsAnalysis.waiting_for_model_choice.set()
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", reply_markup=get_model_choice_keyboard())

async def process_model_choice_handler(message: types.Message, state: FSMContext):
    """
    Handles the user's model choice.
    """
    chosen_model_name = message.text
    selected_model_id = None
    for model_id, config_data in MODELS_CONFIG.items():
        if config_data["name"] == chosen_model_name:
            selected_model_id = model_id
            break
    
    if not selected_model_id:
        if chosen_model_name.lower() != '–æ—Ç–º–µ–Ω–∞':
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.",
                                reply_markup=get_model_choice_keyboard())
        return

    await state.update_data(selected_model_id=selected_model_id)
    await NewsAnalysis.waiting_for_news_text.set()
    await message.reply(f"–í—ã–±—Ä–∞–Ω–∞: *{chosen_model_name}*.\n"
                        f"{MODELS_CONFIG[selected_model_id]['description']}\n\n"
                        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
                        reply_markup=types.ReplyKeyboardRemove(), parse_mode=ParseMode.MARKDOWN)

async def process_news_text_handler(message: types.Message, state: FSMContext):
    """
    Processes the news text sent by the user.
    """
    user_data = await state.get_data()
    selected_model_id = user_data.get("selected_model_id")
    news_text = message.text

    if not selected_model_id:
        logging.error(f"–í —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_news_text –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç selected_model_id –¥–ª—è user {message.from_user.id}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –º–æ–¥–µ–ª—å –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å /analyze.")
        await state.finish()
        return

    start_time = time.time()
    logging.info(f"User {message.from_user.id} (–º–æ–¥–µ–ª—å: {selected_model_id}) sent text: '{news_text[:100]}...'")
    status_message = await message.reply("üîé –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–æ–≤–æ—Å—Ç—å...")

    label, probability = await predict_fake_news(news_text, selected_model_id)
    processing_time_ms = int((time.time() - start_time) * 1000)

    request_id = await log_request_to_db(
        user_id=message.from_user.id, chat_id=message.chat.id, message_id=message.message_id,
        news_text=news_text, predicted_label=label, probability=probability,
        processing_time_ms=processing_time_ms, selected_model_id=selected_model_id
    )

    response_text = f"–†–µ–∑—É–ª—å—Ç–∞—Ç ({MODELS_CONFIG[selected_model_id]['name']}): *{label}*"
    if probability is not None:
        response_text += f"\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: *{probability*100:.2f}%*"
    
    reply_markup = get_feedback_keyboard(request_id) if request_id else None
    
    try:
        await status_message.edit_text(response_text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
    except Exception:
        await message.reply(response_text, parse_mode=ParseMode.MARKDOWN, reply_markup=reply_markup)
    await state.finish()

async def process_feedback_callback_handler(callback_query: types.CallbackQuery, callback_data: dict, state: FSMContext):
    request_id = callback_data.get("request_id")
    rating = callback_data.get("rating")
    user_id = callback_query.from_user.id

    logging.info(f"–ü–æ–ª—É—á–µ–Ω —Ñ–∏–¥–±–µ–∫ –æ—Ç user {user_id} –¥–ª—è request_id {request_id}: {rating}")
    success = await log_feedback_to_db(request_id, user_id, rating)

    if success:
        await callback_query.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üòä")
        rating_text = "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π" if rating == "correct" else "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π"
        try:
            await callback_query.bot.send_message(
                chat_id=callback_query.message.chat.id,
                text=f"–í–∞—à {rating_text} –æ—Ç–∑—ã–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É —É—á—Ç–µ–Ω. –°–ø–∞—Å–∏–±–æ!"
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ñ–∏–¥–±–µ–∫–∞: {e}", exc_info=True)
        try:
            await callback_query.bot.edit_message_reply_markup(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                reply_markup=None
            )
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ñ–∏–¥–±–µ–∫–∞: {e}")
    else:
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

def register_analysis_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_analyze_start, Command(commands=['analyze']), state="*")
    dp.register_message_handler(process_model_choice_handler, state=NewsAnalysis.waiting_for_model_choice)
    dp.register_message_handler(process_news_text_handler, state=NewsAnalysis.waiting_for_news_text, content_types=types.ContentType.TEXT)
    dp.register_callback_query_handler(process_feedback_callback_handler, feedback_cb.filter(), state="*")